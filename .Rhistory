str(df) # now "face" and "suit" are saved as character vectors
# Loading Data
# Importing a data set with readr
library(readr)
deck <- read_csv("data/deck.csv")
View(deck)
# Can also use the import wizard
head(deck)
head(deck, 10)
# Saving Data
write.csv(deck, file = "./data/derived-data/cards.csv", row.names = FALSE)
getwd() # to veiw working directory
?write.csv
# See appendix D for more options
library(readr)
deck <- read_csv("data/deck.csv")
View(deck)
# selecting values
deck[1, 1]
deck[1, c(1, 2, 3)]
deck[1, 1:3]
new <- deck[1, c(1, 2, 3)]
new
# select values from vectors as well
vec <- c(6, 1, 3, 6, 10, 5)
vec[1:3]
# returns a data frame
deck[1:2, 1:2]
# returns a vector
deck[1:2, 1]
# returns a data frame
deck[1:2, 1, drop = FALSE]
# negatives returns all elements except the ements in a negative index
deck[-1, 1:3]
deck[-(2:52), 1:3]
deck[-1, 1]
# blank spaces return every value in a dimension
deck[1, ]
# logical values - will return each row that corresponds to a TRUE
deck[1, c(TRUE, TRUE, FALSE)]
rows <- c(TRUE, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,
F, F, F, F, F, F, F, F, F, F, F, F, F, F)
deck[rows, ]
# tell R exactly which values to extract
vec[c(F, T, F, T, F, T)]
# extract using names
deck[1, c("face", "suit", "value")]
deck[ , "value"]
# Exercise - function to deal - returns first row
deal <- function(deck){
deck[1, ]
}
deal(deck)
# shuffle cards to get a different row 1 each time
deck2 <- deck[1:52, ]
head(deck2)
deck3 <- deck[c(2, 1, 3:52), ]
head(deck3)
random <- sample(1:52, size = 52)
random
deck4 <- deck[random, ]
head(deck4)
# Exercise
# card <- deck - # for testing and development
shuffle <- function(cards) {
random <- sample(1:52, size = 52)
cards[random, ]
}
deal(deck)
deck2 <- shuffle(deck)
deal(deck2)
# doallar signs and double brackets
deck$value
mean(deck$value)
median(deck$value)
lst <- list(numbers = c(1, 2), logical = TRUE, strings = c("a", "b", "c"))
lst
# reutns a smaller list
lst[1]
# returns selected values as they are, with no list structure
lst$numbers
sum(lst$numbers)
# double brackets for position if name is not specifed returns values
lst[[1]]
# single brackets keeps the list structure
lst[1]
lst["numbers"]
lst[["numbers"]]
# Figure 4-3. It can be helpful to think of your list as a train. Use single brackets to select
# train cars, double brackets to select the contents inside of a car.
# dont use attach() - it attaches the dataset so you can call variables without spelling it out like deck$value
rm(list=ls(all=TRUE)) #Clear the memory of variables from previous run.
cat("\f") # clear console when working in RStudio
library(readr)
deck <- read_csv("data/deck.csv")
View(deck)
deck2 <- deck
vec <- c(0, 0, 0, 0, 0, 0)
# select first value of the vector named vec
vec
vec[1]
# change the value of the first value in vec from 0 to 1000
vec[1] <- 1000
vec
# change multiple values at once
vec[c(1, 3, 5)] <- c(1, 1, 1)
vec
vec[4:6] <- vec[4:6] + 1
vec
# you can expand the objct to accommodate new values
# there are six values of vec, we will add a seventh
vec[7] <- 0
vec
# add new variables to a data set
# add a new column with 1 to 52
deck2$new <- 1:52
head(deck2)
# remove coloumns from a data frame using NULL
deck2$new <- NULL
head(deck2)
View(deck2)
deck2[c(13, 26, 39, 52), ]
deck2[c(13, 26, 39, 52), 3]
deck2$value[c(13, 26, 39, 52)]
deck2$value[c(13, 26, 39, 52)] <- c(14, 14, 14, 14)
deck2$value[c(13, 26, 39, 52)] <-  14
View(deck2)
shuffle <- function(cards) {
random <- sample(1:52, size = 52)
cards[random, ]
}
deck3 <- shuffle(deck)
head(deck3)
1 > 2
1 > c(0, 1, 2)
c(1, 2, 3) == c(3, 2, 1)
# %in% tests whether the value(s) on the left side are in the vector on the right side
# %in% = "in the group"
1 %in% c(3, 4, 5)
c(1, 2) %in% c(3, 4, 5)
c(1, 2, 3) %in% c(3, 4, 5)
c(1, 2, 3, 4) %in% c(3, 4, 5)
# Exercise
# extract face column using $
deck2$face
# test whether each value is equal to "ace"
deck2$face == "ace"
# sum to count the number of TRUEs in the previous vector
sum(deck2$face == "ace")
# returns a logical vector
deck3$face == "ace"
deck3$value[deck3$face == "ace"]
# change value of ace from 1 to 14
# Logical subsetting is a powerful technique because it lets you quickly identify, extract,
# and modify individual values in your data set
deck3$value[deck3$face == "ace"] <- 14
head(deck3)
View(deck3)
deck4 <- deck
# makes all values in the value coloumn in deck 4 equal to 0
deck4$value <- 0
head(deck4, 13)
# test that identifies cards in the hearts suit
deck4$suit == "hearts"
# test to select the values of these cards
deck4$value[deck4$suit =="hearts"]
# assign a new number to these values
deck4$value[deck4$suit == "hearts"] <- 1
deck4$value[deck4$suit == "hearts"]
deck4[deck4$face == "queen", ]
deck4[deck4$suit == "spades", ]
# will use Boolean Operators to find queen of spades
# "and" (&), "or" (|), is exactly one (xor), false (!), are any true (any), are all true (all)
# “Is x greater than two and is x less than nine?” x > 2 & x < 9
a <- c(1, 2, 3)
b <- c(1, 2, 3)
c <- c(1, 2, 4)
a == b
b == c
a == b & b == c
# how to find queen of spades
deck4$face == "queen" & deck4$suit == "spades"
queenofspades <-  deck4$face == "queen" & deck4$suit == "spades"
deck4[queenofspades, ]
deck4$value[queenofspades]
# now we can update the queen of spades value from 0 to 13
deck4$value[queenofspades] <- 13
deck4[queenofspades, ]
# Exercise
w <- c(-1, 0, 1)
x <- c(5, 15)
y <- "February"
z <- c("Monday", "Tuesday", "Friday")
w > 0
x > 10 & x < 20
y == "February"
all(z %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
# Blackjack
deck5 <- deck
head(deck5, 13)
facecard <- deck5$face %in% c("king", "queen", "jack")
deck5[facecard, ]
deck5$value[facecard] <- 10
head(deck5, 13)
# missing information
1 + NA
NA == 1
c(NA, 1:50)
mean(c(NA, 1:50))
mean(c(NA, 1:50), na.rm = TRUE)
is.na(NA)
vec <- c(1, 2, 3, NA)
is.na(vec)
deck5$value[deck5$face == "ace"] <- NA
head(deck5, 13)
deal(deck)
View(shuffle)
deal <- function(deck){
deck[1, ]
}
deal(deck)
deal(deck)
library(devtools)
parenvs(all = TRUE)
library(devtools)
parenvs(all = TRUE)
install.packages(devtools)
install.packages("devtools")
install.packages("devtools")
library(devtools)
parenvs(all = TRUE)
as.environment("package:stats")
as.environment("package:stats")
ls(globalenv())
# thee environments in your tree
globalenv()
baseenv()
emptyenv()
# look up parent envirnment
parent.env(globalenv())
ls.str(globalenv())
# access an object in a specific environment
head(globalenv()$deck, 3)
# save an object into a particular environment
assign("new", "Hello Global", envir = globalenv())
globalenv()$new
# see the current active environment
environment()
show_env <- function(){
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env()
show_env()
show_env()
# look up a function's origin environment
environment(show_env)
environment(parenvs)
environment(parent.env)
show_env <- function(){
a <- 1
b <- 2
c <- 3
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
show_env <- function(){
a <- 1
b <- 2
c <- 3
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
a <- 1
show_env <- function(){
a <- 1
b <- 2
c <- 3
list(ran.in = environment(),
parent = parent.env(environment()),
objects = ls.str(environment()))
}
deck[1, ]
deal
environment(deal)
deal()
deal <- function() {
deck[1, ]
}
environment(deal)
deal()
deal()
deal()
DECK <- deck
deck <- deck[-1, ]
deck
head(deck, 3)
deal <- function() {
card <- deck[1, ]
deck <- deck[-1, ]
card
}
deal()
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
}
deal()
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
}
deal()
deal()
deal()
deal()
deal <- function() {
card <- deck[1, ]
deck <- deck[-1, ]
card
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
}
deal()
assign("deck", deck[-1, ], envir = globalenv())
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
}
deal()
View(deal)
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
}
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
}
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
}
deal()
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
}
deal()
deal <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
deal()
deal()
deal()
random <- sample(1:52, size = 52)
shuffle(deck)
shuffle(deck2)
shuffle(deck, 3)
shuffle(deck, 3)
shuffle(deck2)
a <- shuffle(deck2)
head(deck2, 3)
head(a, 3)
shuffle <- function(){
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = globalenv())
}
shuffle(deck2)
shuffle()
deal()
deal()
setup <- function(deck) {
DECK <- deck
DEAL <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
SHUFFLE <- function(){
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = globalenv())
}
}
card <- deck[1, ]
setup <- function(deck) {
DECK <- deck
DEAL <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
SHUFFLE <- function(){
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = globalenv())
}
}
setup <- function(deck) {
DECK <- deck
DEAL <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
setup <- function(deck) {
DECK <- deck
DEAL <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
SHUFFLE <- function(){
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = globalenv())
}
}
setup <- function(deck) {
DECK <- deck
DEAL <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = globalenv())
card
}
SHUFFLE <- function(){
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = globalenv())
}
list(deal = DEAL, shuffle = SHUFFLE)
}
cards <- setup(deck)
deal <- cards$deal
shuffle <- cards$shuffle
deal
shuffle
environment(deal)
environment(shuffle)
setup <- function(deck) {
DECK <- deck
DEAL <- function() {
card <- deck[1, ]
assign("deck", deck[-1, ], envir = parent.env(environment()))
card
}
SHUFFLE <- function(){
random <- sample(1:52, size = 52)
assign("deck", DECK[random, ], envir = parent.env(environment()))
}
list(deal = DEAL, shuffle = SHUFFLE)
}
cards <- setup(deck)
deal <- cards$deal
shuffle <- cards$shuffle
rm(deck)
shuffle
shuffle()
deal()
deal()
get_symbols <- function() {
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
sample(wheel, size = 3, replace = TRUE,
prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))
}
get_symbols()
get_symbols()
get_symbols()
score(c("DD", "DD", "DD"))
get_symbols()
get_symbols <- function() {
wheel <- c("DD", "7", "BBB", "BB", "B", "C", "0")
sample(wheel, size = 3, replace = TRUE,
prob = c(0.03, 0.03, 0.06, 0.1, 0.25, 0.01, 0.52))
}
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
get_symbols()
