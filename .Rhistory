1:6
die <- 1:6
die
ls()
ls()
die * die
round(3.14)
factorial(3)
mean(die)
round(mean(die))
sample(x = die, size = 1)
sample(x = die, size = 1)
sample(x = die, size = 1)
sample(x = die, size = 1)
sample(x = die, size = 1)
sample(x = die, size = 1)
sample(x = die, size = 1)
args(sample)
round(3.145, digits = 2)
sample(size = 1, x = die)
sample(x = die, size = 2)
sample(x = die, size = 2, replace = TRUE) # sample without replacement
dice <- sample(x = die, size = 2, replace = TRUE)
dice
sum(dice)
die  <- 1:6
dice <- sample(x = die, size = 2, replace = TRUE)
sum(dice)
roll <- function(){
die  <- 1:6
dice <- sample(x = die, size = 2, replace = TRUE)
sum(dice)
}
roll()
roll()
roll()
roll()
roll()
roll2(1:4)
# bones is now an argument in the function roll2 and needs to be provided
roll2 <- function(bones) {
dice <- sample(x = bones, size = 2, replace = TRUEE)
sum(dice)
}
roll2(1:4)
# bones is now an argument in the function roll2 and needs to be provided
roll2 <- function(bones) {
dice <- sample(x = bones, size = 2, replace = TRUE)
sum(dice)
}
roll2(1:4)
roll2(1:6)
roll2(1:20)
roll2()
# give bones argument at default value
roll2 <- function(bones = 1:6) {
dice <- sample(x = bones, size = 2, replace = TRUE)
sum(dice)
}
dice
roll2()
install.packages("ggplot2")
# chapter 2
# load package "ggplot2"
library("ggplot2")
qplot
# c stands for "concatenate" but think of it as "collect" or "combine"
x <- c(-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1)
x
y <- x^3
y
ggplot2::qplot(x = x, y = y)
x <- c(1, 2, 2, 2, 3, 3)
ggplot2::qplot(x = x, bandwidth = 1)
ggplot2::qplot(x = x, biwidth = 1)
ggplot2::qplot(x = x, binwidth = 1)
x2 <- c(1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4)
ggplot2::qplot(x = x2, binwidth = 1)
x3 <- c(0, 1, 1, 2, 2, 2, 3, 3, 4)
ggplot2::qplot(x = x3, binwidth = 1)
#replicate function repeats R commands and stores the results in a vector
replicate(n = 3, 1+1)
replicate(n = 10, roll())
rolls <- replicate(n = 10000, roll())
ggplot2::qplot(x = rolls, binwidth = 1)
?sample
roll_weighted <- function() {
die  <- 1:6
dice <- sample(
x = die
,size = 2
,replace = TRUE
,prob = c(1/8, 1/8, 1/8, 1/8, 1/8, 3/8))
sum(dice)
}
roll_weighted <- function() {
die  <- 1:6
dice <- sample(
x = die
,size = 2
,replace = TRUE
,prob = c(1/8, 1/8, 1/8, 1/8, 1/8, 3/8))
sum(dice)
}
rolls <- replicate(n = 10000, roll_weighted())
ggplot2::qplot(x = rolls, binwidth = 1)
# atomic vectors - simple vectors
die <- c(1, 2, 3, 4, 5, 6)
die
is.vector(die)
five <- 5
five
is.vector(five)
length(five)
length(die)
# there are six basic types of atomic vectors
# doubles, integers, characters, logicals, complex, and raw
int <- 1L
int
tect <- "ace"
text <- "ace"
text
int <- c(1L, 5L)
int
text <- c("ace", "hearts")
text
sum(die)
sum(text)
sum(int)
# Doubles - double vector stores regular numbers
die <- c(1, 2, 3, 4, 5, 6)
typeof(die)
# Integers - numbers that can be written without a decimal component
int <- c(-1L, 2L, 4L)
int
typeof(int)
# 3 # Character - stores small pieces of text
text <- c("Hello", "World")
text
typeof(text)
typeof("Hello")
# 4 # Logicals - Logical vectors store TRUEs and FALSEs, R’s form of Boolean data. Logicals are very
# helpful for doing things like comparisons
3 > 4
logic <- c(TRUE, FALSE, TRUE)
typof(logic)
logic <- c(TRUE, FALSE, TRUE)
typof(logic)
typeof(logic)
typeof(F)
# 5 # Complex - store complex numbers.
# To create a complex vector, add an imaginary term to a number with i:
comp <- c(1, 1i, 2, 2i, 3, 3i)
comp
# 5 # Complex - store complex numbers.
# To create a complex vector, add an imaginary term to a number with i:
comp <- c(1 + 1i, 1 + 2i, 1 + 3i)
comp
typeof(comp)
# 6 # Raw - store raw bytes of data
raw(3)
typeof(raw)
typeof(raw(3))
# Exercise
hand <- c("ace", "king", "queen", "jack", "ten")
hand
typeof(hand)
# Attributes - like "metadata" attached to vectors and objects
attributes(die)
names(die)
names(die) <- c("one", "two", "three", "four", "five", "six")
names(die)
attributes(die)
die
die + 1
names(die) <- c("uno", "dos", "tres", "quatro", "cinco", "seis")
die
names(die) <-  NULL # remove names
die
# Dim - transform an atomic vector into an n-dimensional array e.g. 2X3
dim(die) <- c(2,3)
die
# or 3X2
dim(die) <- c(3,2)
die
# or a 1 × 2 × 3 hypercube
dim(die) <- c(1, 2, 3)
die
# see matrix or array functions that perform like dim but with more options
# Matrices - store values in a two-dimensional array
m <- matrix(die, nrow = 2)
m
m <- matrix(die, nrow = 2, byrow = TRUE)
m
# More info
?matrix
# Arrays - creates an n-dimensional array
# provide an atomic vector as the first argument, and a vector
# of dimensions as the second argument
ar <- array(c(11:14, 21:24, 31:34), dim = c(2, 2, 3))
ar
# Exercise "
hand1 <- c("ace",    "king",   "queen",  "jack",   "ten",
"spades", "spades", "spades", "spades", "spades")
hand1
# 3 ways to do the samething
matrix(hand1, nrow = 2)
# 3 ways to do the samething
matrix(hand1, nrow = 5)
matrix(hand1, ncol = 2)
dim(hand1) <- c(5, 2)
hand1
(dim(hand1) <- c(5, 2))
hand1
hand2 <- c("ace",    "spades", "king",   "spades", "queen",
"spades", "jack",   "spades", "ten",    "spades")
matrix(hand1, nrow = 5, byrow = TRUE)
matrix(hand2, nrow = 5, byrow = TRUE)
matrix(hand2, ncol = 2, byrow = TRUE)
# Class - changing the dimensions of your object will change the object’s class attribute
dim(die) <- c(2, 3)
typeof(die)
class(die)
attributes(die)
class("Hello")
class(5)
# Dates and Times
now <- Sys.time()
now
typeof(now)
class(now)
unclass(now)
mil <- 1000000
mil
class(mil) <- c("POSIXct", "POSIXt")
mil
# Factors - is a class and R’s way of storing categorical information
gender <- factor(c("male", "female", "female", "male"))
gender
typeof(gender)
attributes(gender)
unclass(gender)
attr(, levels())
attr(,"levels")
unclass(gender) # how R stores the information
gender
as.character(gender)
# Exercise
card <- c("ace", "hearts" 1)
card
# Exercise
card <- c("ace", "hearts", 1)
card
# Coercion - R always uses the same rules to coerce data to a single type. If character
#strings are present, everything will be coerced to a character string. Otherwise, logicals
#are coerced to numerics.
sum(c(TRUE, TRUE, FALSE, FALSE))
sum(c(1, 1, 0, 0))
as.character(1)
as.logical(1)
as.numeric(FALSE)
# Lists - lists group together R objects, such as atomic vectors and other lists
list1 <- list(100:130, "R", list(TRUE, FALSE))
# Exercise
card <- list("ace", "hearts", 1)
card
# Dataframes - group vectors together into a two-dimensional table. Each vector becomes a column in the table.
df <- data.frame(face   = c("ace", "two", "six")
,suit  = c("clubs", "clubs", "clubs")
,value = c(1, 2, 3)
)
df
# NOTE: You can also give names to a list or vector when you create one of these objects.
list(face = "ace", suit = "hearts", value = 1)
c(face = "ace", suit = "hearts", value = "one")
# NOTE: You can also give names to a list or vector when you create one of these objects.
ls1 <- list(face = "ace", suit = "hearts", value = 1)
c1 <- c(face = "ace", suit = "hearts", value = "one")
attributes(ls1)
attributes(c1)
typeof(df)
class(df)
str(df)
df <- data.frame(face   = c("ace", "two", "six")
,suit  = c("clubs", "clubs", "clubs")
,value = c(1, 2, 3)
,stringsAsFactors = FALSE
)
str(df)
deck <- read.csv("~/github/programming-with-R/data/deck.csv", stringsAsFactors=FALSE)
View(deck)
# Can also use the import wizard
head(deck)
head(deck, 10)
# Saving Data
write.csv(deck, file = "./data/derived-data/datacards.csv", row.names = FALSE)
# Saving Data
write.csv(deck, file = "./data/derived-data/cards.csv", row.names = FALSE)
getwd()
?write.csv
